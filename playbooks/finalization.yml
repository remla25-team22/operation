---
- name: Finalize Kubernetes setup
  hosts: ctrl
  become: true
  gather_facts: false

  tasks:
    - name: Copy MetalLB CRD manifest to remote
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/metallb-native.yaml"
        dest: /tmp/metallb-native.yaml
        owner: vagrant
        mode: '0644'

    - name: Apply MetalLB CRDs
      ansible.builtin.command: kubectl apply -f /tmp/metallb-native.yaml
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"

    - name: Wait for MetalLB controller pod to be ready
      ansible.builtin.shell: >
        kubectl wait --namespace metallb-system 
        --for=condition=ready pod 
        --selector=component=controller 
        --timeout=90s
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"

    - name: Create MetalLB IPAddressPool (with retries)
      kubernetes.core.k8s:
        kubeconfig: "/etc/kubernetes/admin.conf"
        state: present
        definition: |
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: default-pool
            namespace: metallb-system
          spec:
            addresses:
              - 192.168.56.120-192.168.56.130
      register: metallb_pool
      retries: 5
      delay: 10
      until: metallb_pool is not failed

    - name: Create MetalLB L2Advertisement
      kubernetes.core.k8s:
        kubeconfig: "/etc/kubernetes/admin.conf"
        state: present
        definition: |
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: default-l2adv
            namespace: metallb-system
          spec: {}

    - name: Add ingress-nginx Helm repo
      kubernetes.core.helm_repository:
        name: ingress-nginx
        repo_url: https://kubernetes.github.io/ingress-nginx

    - name: Install / upgrade NGINX Ingress Controller
      kubernetes.core.helm:
        name: ingress-nginx
        chart_ref: ingress-nginx/ingress-nginx
        release_namespace: ingress-nginx
        create_namespace: true
        kubeconfig: "/etc/kubernetes/admin.conf"
        values:
          controller:
            service:
              loadBalancerIP: 192.168.56.121
            ingressClassResource:
              name: nginx
              default: true
      register: ingress_release

    - name: Show ingress-nginx release output
      debug:
        var: ingress_release.stdout

    - name: Wait for ingress-nginx controller pod to be ready
      ansible.builtin.shell: >
        kubectl wait --namespace ingress-nginx 
        --for=condition=ready pod 
        --selector=app.kubernetes.io/component=controller 
        --timeout=90s
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"

    - name: Add kubernetes-dashboard Helm repo
      kubernetes.core.helm_repository:
        name: kubernetes-dashboard
        repo_url: https://kubernetes.github.io/dashboard/

    - name: Install / upgrade kubernetes-dashboard
      kubernetes.core.helm:
        name: kubernetes-dashboard
        chart_ref: kubernetes-dashboard/kubernetes-dashboard
        release_namespace: kubernetes-dashboard
        create_namespace: true
        kubeconfig: /etc/kubernetes/admin.conf

    - name: Create admin-user ServiceAccount and ClusterRoleBinding
      kubernetes.core.k8s:
        kubeconfig: /etc/kubernetes/admin.conf
        state: present
        definition: |
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: admin-user
            namespace: kubernetes-dashboard
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: admin-user
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
            - kind: ServiceAccount
              name: admin-user
              namespace: kubernetes-dashboard

    - name: Retrieve Dashboard login token
      command:
        argv:
          - kubectl
          - -n
          - kubernetes-dashboard
          - create
          - token
          - admin-user
          - --duration=24h
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: dash_token

    - name: Show the Dashboard login token
      debug:
        msg: "{{ dash_token.stdout }}"

    - name: Generate self-signed certificate if absent
      ansible.builtin.command: >
        openssl req -x509 -nodes -newkey rsa:2048
        -days 365
        -subj "/CN=dashboard.local"
        -keyout /tmp/dashboard.key
        -out /tmp/dashboard.crt
      args:
        creates: /tmp/dashboard.crt

    - name: Create / update Kubernetes TLS secret
      ansible.builtin.shell: >
        kubectl -n kubernetes-dashboard create secret tls dashboard-local-tls
        --key /tmp/dashboard.key --cert /tmp/dashboard.crt
        --dry-run=client -o yaml | kubectl apply -f -
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"

    - name: Expose Kubernetes Dashboard through NGINX Ingress
      kubernetes.core.k8s:
        kubeconfig: /etc/kubernetes/admin.conf
        state: present
        definition: |
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: kubernetes-dashboard
            namespace: kubernetes-dashboard
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
              nginx.ingress.kubernetes.io/ssl-passthrough: "true"
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
          spec:
            ingressClassName: nginx
            tls:
              - hosts:
                  - dashboard.local
                secretName: dashboard-local-tls
            rules:
              - host: dashboard.local
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: kubernetes-dashboard-kong-proxy
                          port:
                            number: 443

    - name: Download Istio archive
      ansible.builtin.get_url:
        url: https://github.com/istio/istio/releases/download/1.25.2/istio-1.25.2-linux-amd64.tar.gz
        dest: /tmp/istio-1.25.2-linux-amd64.tar.gz
        mode: '0644'

    - name: Unpack Istio
      ansible.builtin.unarchive:
        src: /tmp/istio-1.25.2-linux-amd64.tar.gz
        dest: /opt/
        remote_src: yes

    - name: Symlink istioctl into PATH
      ansible.builtin.file:
        src: /opt/istio-1.25.2/bin/istioctl
        dest: /usr/local/bin/istioctl
        state: link

    - name: Install Istio control plane
      ansible.builtin.command: >
        istioctl install -y --set profile=default --kubeconfig=/etc/kubernetes/admin.conf
      args:
        creates: /etc/istio

    - name: Wait until every Istio pod is Ready
      ansible.builtin.command: >
        kubectl -n istio-system wait pod
        --for=condition=ready
        --all
        --timeout=180s
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
      register: istio_wait
      changed_when: false
      retries: 3
      delay: 10
      until: istio_wait.rc == 0

    - name: Deploy Prometheus addon
      ansible.builtin.command: kubectl apply -f /opt/istio-1.25.2/samples/addons/prometheus.yaml
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"

    - name: Deploy Grafana addon
      ansible.builtin.command: kubectl apply -f /opt/istio-1.25.2/samples/addons/grafana.yaml
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
