- hosts: all
  become: yes
  tasks:
    - name: Disable swap
      shell: swapoff -a

    - name: Remove swap from /etc/fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^.*swap.*$'
        state: absent

    - name: Load required kernel modules for future reboots
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          overlay
          br_netfilter

    - name: Load kernel modules now
      community.general.modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - br_netfilter
        - overlay

    - name: Apply sysctl settings
      ansible.posix.sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { name: 'net.ipv4.ip_forward', value: 1 }
        - { name: 'net.bridge.bridge-nf-call-iptables', value: 1 }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: 1 }

    - name: Register student SSH keys
      ansible.posix.authorized_key:
        user: vagrant
        state: present
        key: "{{ lookup('file', item) }}"
      with_fileglob:
        - "../ssh_keys/*.pub"

    - name: Generate /etc/hosts from template
      template:
        src: ../templates/hosts.j2
        dest: /etc/hosts
        owner: root
        group: root
        mode: '0644'

    - name: Add kubernetes signing key
      ansible.builtin.apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
        state: present
    
    - name: Add Kubernetes apt repository source
      ansible.builtin.apt_repository:
        repo: deb https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /
        filename: kubernetes
        state: present
  
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
    
    - name: Install packages
      ansible.builtin.apt:
        name:
          - containerd=1.7.24-0ubuntu1~24.04.2
          - runc=1.1.12-0ubuntu3
          - kubelet=1.32.4-1.1
          - kubeadm=1.32.4-1.1
          - kubectl=1.32.4-1.1
        state: present

    - name: "Create a directory for containerd config"
      file: path=/etc/containerd state=directory

    - name: Generate default containerd config
      ansible.builtin.shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: set disable_apparmor in containerd config
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        search_string: 'disable_apparmor ='
        line: '    disable_apparmor = true'
            
    - name: set sandbox_image in containerd config
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        search_string: 'sandbox_image ='
        line: '    sandbox_image = "registry.k8s.io/pause:3.10"'
            
    - name: set SystemdCgroud in containerd config
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        search_string: 'SystemdCgroup ='
        line: '            SystemdCgroup = true'
    
    - name: Restart containerd to apply config
      ansible.builtin.service:
        name: containerd
        state: restarted
        enabled: yes
    
    - name: Start kubelet
      ansible.builtin.service:
        name: kubelet
        state: started
        enabled: yes